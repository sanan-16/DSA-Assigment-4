Binary Search Tree Search:
Start at the Root:

Begin at the root of the tree.
Compare with Current Node:

Compare the target element with the value of the current node.
If the target is equal to the current node's value, you've found the element, and the search is successful.
If the target is less than the current node's value, move to the left subtree.
If the target is greater than the current node's value, move to the right subtree.
Repeat:

Repeat the process recursively or iteratively on the subtree chosen in the previous step until the target is found or you reach a leaf node.
Worst Case Time Complexity:
The worst-case time complexity of searching in a binary search tree is O(h), where h is the height of the tree. In the worst case, the tree is skewed (essentially a linked list), and the height is equal to the number of nodes in the tree.

If the tree is balanced, the height is logarithmic in the number of nodes (O(log n)), making the search very efficient. However, if the tree is unbalanced, for example, if nodes are inserted in sorted order, the height becomes n (number of nodes), and the search degrades to O(n), which is equivalent to linear search.